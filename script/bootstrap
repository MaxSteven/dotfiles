#!/usr/bin/env bash

cd "$(dirname "$0")/.."
DOTFILES=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {


  if [ "$(uname -s)" == "Darwin" ]
  then
    GITFILE=gitconfig.symlink
  fi

  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/$GITFILE.example > git/$GITFILE

    success 'gitconfig'
  fi
}

install_git_submodules () {
  # If we're on a Mac, let's install and setup homebrew.
  info "installing git submodules"
  if git submodule update --init --recursive
  then
    success "git submodules installed"
  else
    fail "error installing git submodules"
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_dependencies() {
  # If we're on a Mac, let's install and setup homebrew.
  if [ "$(uname -s)" == "Darwin" ]
  then
    info "installing dependencies (see /tmp/dotfiles-dot)"
    if source bin/dot > /tmp/dotfiles-dot 2>&1
    then
      success "dependencies installed"
    else
      fail "error installing dependencies"
    fi
  fi
}

install_config() {
    # Install ~/.config
    info "installing ~/.config"
    if [ ! -d $HOME/.config ]; then
        mkdir -p $HOME/.config
    fi
    # configs=$( find -path "$DOTFILES/config.symlink" -maxdepth 1 )
    for config in $DOTFILES/config/*; do
        target=$HOME/.config/$( basename $config )
        if [ -e $target ]; then
            success "~${target#$HOME} already exists... Skipping."
        else
            success  "creating symlink for $config"
            ln -s $config $target
        fi
    done
}

vim_symlinks() {
    # As I have moved off of vim as my full time editor in favor of neovim,
    # I feel it doesn't make sense to leave my vimrc intact in the dotfiles repo
    # as it is not really being actively maintained. However, I would still
    # like to configure vim, so lets symlink ~/.vimrc and ~/.vim over to their
    # neovim equivalent.
    info "creating vim->nvim symlinks"

    # ~/.vim
    if ! [ -e ~/.vim ]; then
        ln -s $DOTFILES/config/nvim ~/.vim
        success "~/.vim symlink created"
    else
        success "~/.vim already exists... Skipping."
    fi

    # ~/.vimrc
    if ! [ -e ~/.vimrc ]; then
        ln -s $DOTFILES/config/nvim/init.vim ~/.vimrc
        success "~/.vimrc symlink created"
    else
        success "~/.vimrc already exists... Skipping."
    fi

}

sublime_symlinks() {
    # Install Sublime Text 3 symlinks
    info "creating sublime text 3 symlinks"
    SUBLIME="$HOME/Library/Application Support/Sublime Text 3"
    if [ ! -d "$SUBLIME/Packages/User" ]; then
        mkdir -p "$SUBLIME/Packages/User"
    fi

    for file in $DOTFILES/sublimetext3/*settings; do
        target="$SUBLIME"/Packages/User/$( basename "$file" )
        if [ -e "$target" ]; then
            success "~${target#$HOME} already exists... Skipping."
        else
            success  "creating symlink for $file"
            ln -s "$file" "$target"
        fi
    done
}


setup_gitconfig
install_git_submodules
install_dotfiles
install_config
vim_symlinks
sublime_symlinks
install_dependencies

echo ''
echo '  All installed!'
